package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"backend/db"
	"backend/graph/model"
	"backend/login"
	"context"
	"fmt"
	"math/rand"
)

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input model.NewBook) (*model.Book, error) {
	book := &model.Book{
		ID:     fmt.Sprintf("T%d", rand.Intn(1000000)),
		Title:  input.Title,
		Author: input.Author,
		Price:  input.Price,
		Image:  input.Image,
	}
	db.GetDB().Create(book)
	//books = append(books, book)
	return book, nil
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, id string, input model.NewBook) (*model.Book, error) {
	var book model.Book
	if err := db.GetDB().First(&book, "id = ?", id).Error; err != nil {
		return nil, fmt.Errorf("book with id %s not found", id)
	}

	book.Title = input.Title
	book.Author = input.Author
	book.Price = input.Price
	book.Image = input.Image

	if err := db.GetDB().Save(&book).Error; err != nil {
		return nil, err
	}
	return &book, nil
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, id string) (bool, error) {
	result := db.GetDB().Delete(&model.Book{}, "id = ?", id)
	if result.Error != nil {
		return false, result.Error
	}
	if result.RowsAffected == 0 {
		return false, fmt.Errorf("book with id %s not found", id)
	}
	return true, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	var books []*model.Book
	if err := db.GetDB().Find(&books).Error; err != nil {
		return nil, err
	}
	return books, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (string, error) {
	var admin model.Admin
	if err := db.GetDB().First(&admin, "email = ?", email).Error; err != nil {
		return "", fmt.Errorf("admin with email %s not found", email)
	}
	if admin.Password != password {
		return "", fmt.Errorf("invalid password")
	}
	tokenString, err := login.CreateToken(email)
	if err != nil {
		return "", err
	}
	return tokenString, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
